name: Automated Release

on:
  milestone:
    types: [closed]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
      chartVersion:
        description: 'Chart Version'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      CHANGELOG: CHANGELOG.md
      RELEASE_NOTES_FILENAME: release_notes
      RELEASE_NOTES_FULLNAME: release_notes.md
      SEMVER_REGEX: '(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?'

    steps:
      - name: Get Version from Milestone
        if: ${{ github.event_name == 'milestone' }}
        run: |
          TITLE="${{ github.event.milestone.title }}"
          [[ "$TITLE" =~ $SEMVER_REGEX ]] || { echo "Invalid milestone title $TITLE"; exit 1; }
          RELEASE_VERSION=${BASH_REMATCH}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Get Version from Workflow Dispatch Input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: echo RELEASE_VERSION="${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Parse Version
        id: release_semver
        uses: apexskier/github-semver-parse@v1
        with:
          version: ${{ env.RELEASE_VERSION }}

      - name: Verify Version Prerelease
        if: ${{ github.event_name == 'workflow_dispatch' && steps.release_semver.outputs.prerelease == '' }}
        run: echo "Workflow dispatch not supported for GA release, and the milestone should be closed instead" && exit 1

      - name: Set Release Environment Variables
        run: |
          [[ -z "${{ steps.release_semver.outputs.version }}" ]] && { echo "Invalid version"; exit 1; }
          RELEASE_BRANCH="release/${{ steps.release_semver.outputs.major }}.${{ steps.release_semver.outputs.minor }}"
          RELEASE_TAG=v${RELEASE_VERSION}
          RELEASE_VERSION_NEXT_MINOR=$((${{ steps.release_semver.outputs.minor }}+1))
          RELEASE_VERSION_NEXT_SNAPSHOT="${{ steps.release_semver.outputs.major }}.${RELEASE_VERSION_NEXT_MINOR}.0-SNAPSHOT"

          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV
          echo "RELEASE_VERSION_NEXT_SNAPSHOT=${RELEASE_VERSION_NEXT_SNAPSHOT}" >> $GITHUB_ENV

      - name: Parse Chart Version from Workflow Dispatch Input
        uses: apexskier/github-semver-parse@v1
        id: input_chart_semver
        if: ${{ github.event_name == 'workflow_dispatch' }}
        with:
          version: ${{ github.event.inputs.chartVersion }}

      - name: Verify Chart Version Prerelease
        if: ${{ github.event_name == 'workflow_dispatch' && steps.input_chart_semver.outputs.prerelease == '' }}
        run: echo "Workflow dispatch not supported for GA release, and the milestone should be closed instead" && exit 1

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      - name: Create and Switch to Release Branch
        run: |
          if ! git ls-remote --exit-code --heads --quiet origin refs/heads/${RELEASE_BRANCH}; then
            git checkout -b ${RELEASE_BRANCH}
            git push -u origin ${RELEASE_BRANCH}
          else
            git checkout ${RELEASE_BRANCH}
          fi

      - name: Get Chart Version from Workflow Dispatch Input
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          CHART_VERSION="${{ github.event.inputs.chartVersion }}"
          echo "CHART_VERSION=${CHART_VERSION}" >> $GITHUB_ENV

      - name: Get Chart Version from Release Branch
        if: ${{ github.event_name == 'milestone' }}
        run: |
          CHART_VERSION=$(sed -rn 's/<release\.chartVersion>([0-9.]*).*<\/release.chartVersion>/\1/p' pom.xml | xargs)
          echo "CHART_VERSION=${CHART_VERSION}" >> $GITHUB_ENV

      - name: Parse Chart Version
        id: chart_semver
        uses: apexskier/github-semver-parse@v1
        with:
          version: ${{ env.CHART_VERSION }}

      - name: Set Chart Version for Patch Release
        if: ${{ steps.release_semver.outputs.patch != 0 && steps.chart_semver.outputs.prerelease == '' }}
        run: |
          CHART_VERSION_PATCH=$((${{ steps.chart_semver.outputs.patch }}+1))
          CHART_VERSION="${{ steps.chart_semver.outputs.major }}.${{ steps.chart_semver.outputs.minor }}.${CHART_VERSION_PATCH}"
          echo "CHART_VERSION=${CHART_VERSION}" >> $GITHUB_ENV

      - name: Set Next Chart Snapshot Version
        run: |
          [[ -z "${{ steps.chart_semver.outputs.version }}" ]] && { echo "Invalid chart version"; exit 1; }
          CHART_VERSION_NEXT_MINOR=$((${{ steps.chart_semver.outputs.minor }}+1))
          CHART_VERSION_NEXT_SNAPSHOT="${{ steps.chart_semver.outputs.major }}.${CHART_VERSION_NEXT_MINOR}.0-SNAPSHOT"
          echo "CHART_VERSION_NEXT_SNAPSHOT=${CHART_VERSION_NEXT_SNAPSHOT}" >> $GITHUB_ENV

      - name: Update Pom
        run: |
          sed -i -r -e 's/(<release\.version>).*(<\/release\.version>)/\1'${RELEASE_VERSION}'\2/g' \
            -e 's/(<release\.chartVersion>).*(<\/release\.chartVersion>)/\1'${CHART_VERSION}'\2/g' pom.xml

      - name: Maven Release
        run: ./mvnw clean package -N -P=release

      - name: Create Release Notes
        if: ${{ github.event_name == 'milestone' }}
        uses: Decathlon/release-notes-generator-action@v3.1.4
        env:
          FILENAME: ${{ env.RELEASE_NOTES_FILENAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Changelog
        if: ${{ github.event_name == 'milestone' }}
        run: |
          DESCRIPTION="${{ github.event.milestone.description }}"
          RELEASE_DATE=$(date +%Y-%m-%d)

          GITHUB_RELEASE_NOTES=$(mktemp --suffix .md)
          TMP_CHANGELOG=$(mktemp --suffix .md)
          TMP_RELEASE_NOTES=$(mktemp --suffix .md)

          # copy to a temporary file for modification due to lack of write permsision
          if [ ! -z "$DESCRIPTION" ]; then
            echo -e "$DESCRIPTION\n" > $GITHUB_RELEASE_NOTES
            cat $RELEASE_NOTES_FULLNAME >> $GITHUB_RELEASE_NOTES
          else
            cp $RELEASE_NOTES_FULLNAME $GITHUB_RELEASE_NOTES
          fi
          sed -r 's/^(#+) /\1# /g' $GITHUB_RELEASE_NOTES > $TMP_RELEASE_NOTES

          FIRST_LINE=$(grep -E -n -m 1 "^## ${SEMVER_REGEX}" $CHANGELOG | cut -d: -f1)
          FIRST_LINE=${FIRST_LINE:-1}
          tail -n +${FIRST_LINE} $CHANGELOG > $TMP_CHANGELOG
          echo -e "# Hedera Mirror Node Changelog\n" > $CHANGELOG
          echo -e "## ${RELEASE_VERSION} (${RELEASE_DATE})\n" >> $CHANGELOG
          cat $TMP_RELEASE_NOTES >> $CHANGELOG
          echo "" >> $CHANGELOG
          cat $TMP_CHANGELOG >> $CHANGELOG

          echo "GITHUB_RELEASE_NOTES=${GITHUB_RELEASE_NOTES}" >> $GITHUB_ENV

      - name: Commit and Tag
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Bump version to ${{ env.RELEASE_TAG }}
          commit_options: '--no-verify --signoff'
          tagging_message: ${{ env.RELEASE_TAG }}

      - name: Reset Master to Release Branch
        run: |
          git checkout master
          git reset --hard ${RELEASE_BRANCH}

      - name: Update Version to Next Minor Snapshot
        run: |
          sed -i -r -e 's/(<release\.version>).*(<\/release\.version>)/\1'${RELEASE_VERSION_NEXT_SNAPSHOT}'\2/g' \
            -e 's/(<release\.chartVersion>).*(<\/release\.chartVersion>)/\1'${CHART_VERSION_NEXT_SNAPSHOT}'\2/g' pom.xml

      - name: Maven Release for Next Minor Snapshot
        run: ./mvnw clean package -N -P=release

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          body: ''
          branch: create-pull-request/${{ env.RELEASE_BRANCH }}
          delete-branch: true
          signoff: true
          title: Bump version to v${{ env.RELEASE_VERSION_NEXT_SNAPSHOT }} and merge changes from ${{ env.RELEASE_BRANCH }}

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: ${{ env.GITHUB_RELEASE_NOTES }}
          commit: ${{ env.RELEASE_BRANCH }}
          draft: true
          name: ${{ env.RELEASE_TAG }}
          prerelease: ${{ steps.release_semver.outputs.prerelease != '' }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
