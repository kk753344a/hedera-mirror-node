name: Automated Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (semver)'
        required: true
      chartVersion:
        description: 'Chart Version (semver)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      CHANGELOG: CHANGELOG.md
      RELEASE_NOTES_FILENAME: release_notes
      RELEASE_NOTES_FULLNAME: release_notes.md

    steps:
      - name: Parse Version
        id: version_parser
        uses: terradatum/semver-action@v1
        with:
          bump: preminor
          version: ${{ github.event.inputs.version }}

      - name: Parse Chart Version
        id: chart_version_parser
        uses: terradatum/semver-action@v1
        with:
          bump: preminor
          version: ${{ github.event.inputs.chartVersion }}

      - name: Set Prerelease
        if: ${{ contains(steps.version_parser.outputs.version, '-') }}
        run: echo "PRERELEASE=true" >> $GITHUB_ENV

      - name: Set Release Environment Variables
        run: |
          RELEASE_BRANCH="release/${{ steps.version_parser.outputs.major }}.${{ steps.version_parser.outputs.minor }}"
          RELEASE_TAG=v${{ steps.version_parser.outputs.version }}
          [[ "$PRERELEASE" != 'true' ]] && echo "CREATE_PULL_REQUEST=true" >> $GITHUB_ENV
          echo "RELEASE_BRANCH=${RELEASE_BRANCH}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${RELEASE_TAG}" >> $GITHUB_ENV

      - name: Get Milestone
        if: ${{ env.PRERELEASE != 'true' }}
        run: |
          GITHUB_HEADER="Accept: application/vnd.github.v3+json"
          MILESTONE_BASE_URL=https://api.github.com/repos/${{ github.repository }}/milestones
          response=$(curl -s -H "$GITHUB_HEADER" $MILESTONE_BASE_URL)

          OLD_IFS=$IFS
          IFS=$'\n'
          milestones=($(echo $response | jq -r '.[] | .title, .number'))
          IFS=$OLD_IFS

          for (( i=0; i<${#milestones[@]}; ))
          do
            title=${milestones[$i]}
            if [[ "$title" =~ $VERSION_REGEX ]]; then
              MILESTONE_NUMBER=${milestones[$((i+1))]}
              MILESTONE_DESCRIPTION_FILE=$(mktemp)
              curl -s -H "$GITHUB_HEADER" $MILESTONE_BASE_URL/$MILESTONE_NUMBER | jq -r '.description' | sed 's/\r$//' > $MILESTONE_DESCRIPTION_FILE
              echo "MILESTONE_NUMBER=$MILESTONE_NUMBER" >> $GITHUB_ENV
              echo "MILESTONE_DESCRIPTION_FILE=$MILESTONE_DESCRIPTION_FILE" >> $GITHUB_ENV
              exit 0
            fi
            i=$((i+2))
          done

          echo "No matching milestone found" && exit 1
        env:
          VERSION_REGEX: '${{ steps.version_parser.outputs.major }}\.${{ steps.version_parser.outputs.minor }}\.${{ steps.version_parser.outputs.patch }}$'

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-m2-${{ hashFiles('pom.xml') }}
          path: ~/.m2
          restore-keys: ${{ runner.os }}-m2

      - name: Create and Switch to Release Branch
        run: |
          if ! git ls-remote --exit-code --heads --quiet origin refs/heads/${RELEASE_BRANCH}; then
            git checkout -b ${RELEASE_BRANCH}
            git push -u origin ${RELEASE_BRANCH}

            echo "CREATE_PULL_REQUEST=true" >> $GITHUB_ENV
          else
            git checkout ${RELEASE_BRANCH}
          fi

      - name: Maven Release
        run: ./mvnw clean package -Drelease.version=$VERSION -Drelease.chartVersion=$CHART_VERSION -N -P=release
        env:
          VERSION: ${{ steps.version_parser.outputs.version }}
          CHART_VERSION: ${{ steps.chart_version_parser.outputs.version }}

      - name: Create Release Notes
        if: ${{ env.PRERELEASE != 'true' }}
        uses: xin-hedera/release-notes-generator-action@v3.1.5-rc1
        env:
          FILENAME: ${{ env.RELEASE_NOTES_FILENAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Changelog
        if: ${{ env.PRERELEASE != 'true' }}
        run: |
          RELEASE_DATE=$(date +%Y-%m-%d)

          GITHUB_RELEASE_NOTES=$(mktemp --suffix .md)
          TMP_CHANGELOG=$(mktemp --suffix .md)
          TMP_RELEASE_NOTES=$(mktemp --suffix .md)

          # copy to a temporary file for modification due to lack of write permsision
          echo | cat $MILESTONE_DESCRIPTION_FILE - $RELEASE_NOTES_FULLNAME > $GITHUB_RELEASE_NOTES
          RELEASE_NOTES=$(sed -r 's/^(#+) /\1# /g' $GITHUB_RELEASE_NOTES)

          CHANGELOG_TITLE="# Hedera Mirror Node Changelog"
          CHANGELOG_PREVIOUS=$(sed 'N; N; 0,/^'"${CHANGELOG_TITLE}"'\n.*\n/s///' $CHANGELOG)
          cat > $CHANGELOG <<EOF
          ${CHANGELOG_TITLE}

          ## ${{ steps.version_parser.outputs.version }} (${RELEASE_DATE})

          ${RELEASE_NOTES}

          ${CHANGELOG_PREVIOUS}
          EOF

          echo "GITHUB_RELEASE_NOTES=${GITHUB_RELEASE_NOTES}" >> $GITHUB_ENV

      - name: Commit and Tag
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Bump version to ${{ env.RELEASE_TAG }}
          commit_options: '--no-verify --signoff'
          tagging_message: ${{ env.RELEASE_TAG }}

      - name: Reset Master to Release Branch
        if: ${{ env.CREATE_PULL_REQUEST == 'true' }}
        run: |
          git checkout master
          git reset --hard ${RELEASE_BRANCH}

      - name: Set Snapshot Versions
        if: ${{ env.CREATE_PULL_REQUEST == 'true' }}
        run: |
          NEXT_VERSION_SNAPSHOT="${{ steps.version_parser.outputs.next-major }}.${{ steps.version_parser.outputs.next-minor }}.0-SNAPSHOT"
          NEXT_CHART_VERSION_SNAPSHOT="${{ steps.chart_version_parser.outputs.next-major }}.${{ steps.chart_version_parser.outputs.next-minor }}.0-SNAPSHOT"
          echo "NEXT_VERSION_SNAPSHOT=$NEXT_VERSION_SNAPSHOT" >> $GITHUB_ENV
          echo "NEXT_CHART_VERSION_SNAPSHOT=$NEXT_CHART_VERSION_SNAPSHOT" >> $GITHUB_ENV

      - name: Maven Release for Next Minor Snapshot
        if: ${{ env.CREATE_PULL_REQUEST == 'true' }}
        run: ./mvnw clean package -Drelease.version=$NEXT_VERSION_SNAPSHOT -Drelease.chartVersion=$NEXT_CHART_VERSION_SNAPSHOT -N -P=release

      - name: Create Pull Request
        if: ${{ env.CREATE_PULL_REQUEST == 'true' }}
        uses: peter-evans/create-pull-request@v3
        with:
          body: ''
          branch: create-pull-request/${{ env.RELEASE_BRANCH }}
          commit-message: Bump versions for v${{ env.NEXT_VERSION_SNAPSHOT }}
          delete-branch: true
          signoff: true
          title: ${{ fromJSON(format('["Merge changes from {0}", "Bump versions for v{1}"]', env.RELEASE_BRANCH, env.NEXT_VERSION_SNAPSHOT))[env.PRERELEASE == 'true'] }}

      - name: Create Github Release
        uses: ncipollo/release-action@v1
        with:
          bodyFile: ${{ env.GITHUB_RELEASE_NOTES }}
          commit: ${{ env.RELEASE_BRANCH }}
          draft: true
          name: ${{ env.RELEASE_TAG }}
          prerelease: ${{ env.PRERELEASE == 'true' }}
          tag: ${{ env.RELEASE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Close Milestone
        if: ${{ env.PRERELEASE != 'true' }}
        uses: WyriHaximus/github-action-close-milestone@0.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          number: ${{ env.MILESTONE_NUMBER }}
